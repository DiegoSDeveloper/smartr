import { InputHTMLAttributes, FocusEvent, ChangeEvent } from "react";
import { ValidationResult } from "../ValidationResult";
import { Input, ColumnSize, IconPosition, CharacterCasing, TextInput, TooltipPosition, ValueType } from "../types";
import { editorButtonPropTypes } from "../EditorButton/EditorButton";
export interface EditorPropType extends Omit<InputHTMLAttributes<HTMLInputElement>, "type" | "value" | "min" | "max" | "minDate"> {
    type?: Input;
    id?: string;
    name?: string;
    className?: string;
    sm?: ColumnSize;
    md?: ColumnSize;
    lg?: ColumnSize;
    xl?: ColumnSize;
    xxl?: ColumnSize;
    size?: ColumnSize;
    labelSm?: ColumnSize;
    labelMd?: ColumnSize;
    labelLg?: ColumnSize;
    labelXl?: ColumnSize;
    labelXxl?: ColumnSize;
    labelSize?: ColumnSize;
    createColumn?: boolean;
    createRow?: boolean;
    title?: string;
    checkBoxText?: string;
    hasIcon?: boolean;
    iconPosition?: IconPosition;
    appendIcon?: string;
    prependIcon?: string;
    enableShowPassword?: boolean;
    showPasswordIconPosition?: IconPosition;
    showPasswordIcon?: string;
    hidePasswordIcon?: string;
    required?: boolean;
    value?: any;
    accept?: string;
    multiple?: boolean;
    maxFiles?: number;
    maxFilesPlaceholder?: number;
    maxFileSize?: number;
    fileUrlDownload?: string;
    fileDownloadName?: string;
    placeholder?: string;
    hasTitle?: boolean;
    enabled?: boolean;
    readOnly?: boolean;
    inline?: boolean;
    horizontal?: boolean;
    rows?: number;
    characterCasing?: CharacterCasing;
    max?: number;
    min?: number;
    maxDate?: string | Date;
    minDate?: string | Date;
    mask?: string;
    getMaskedValue?: boolean;
    titleBold?: boolean;
    invalid?: boolean;
    invalidMessage?: string;
    requiredMessage?: string;
    validateOnBlur?: boolean;
    validateOnChange?: boolean;
    validateDefaultOnBlur?: boolean;
    validateDefaultOnChange?: boolean;
    validateDefaultOnSubmit?: boolean;
    showValidationResultOnSubmit?: boolean;
    optionsId?: string;
    optionsDescription?: string;
    optionsToolTip?: string;
    optionsGroup?: string;
    optionGetDescription?: (option: any) => string;
    optionGetGroup?: (option: any) => string;
    options?: any[];
    optionsNoneSelectedText?: string;
    optionsNoneSelectedValue?: any;
    optionsFirstSelected?: boolean;
    optionsFilter?: boolean;
    optionsGrouped?: boolean;
    optionsMultiple?: boolean;
    optionsMultipleSeparatorValue?: string;
    optionsMultipleSeparatorDescription?: string;
    optionsFilterPlaceholder?: string;
    optionsLimiteDescriptionSelected?: number;
    optionRenderer?: (option: any, isSelected: boolean, searchText: string) => React.ReactNode;
    input?: TextInput;
    valueType?: ValueType;
    thousandsSeparator?: string;
    decimalSeparator?: string;
    decimalPlaces?: number;
    tooltip?: string;
    toolTipPosition?: TooltipPosition;
    note?: string;
    noteClassName?: string;
    skipSubmit?: boolean;
    prependButtons?: editorButtonPropTypes[];
    appendButtons?: editorButtonPropTypes[];
    state?: any;
    dispatchState?: any;
    formState?: any;
    dispatchFormState?: any;
    listFormState?: any[];
    listFormIndex?: number;
    dispatchListFormState?: any;
    onDownloadFileClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;
    onDeleteFileClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;
    customValidationOnBlur?: (currentValue: any) => Promise<ValidationResult[]>;
    customValidationOnChange?: (currentValue: any) => Promise<ValidationResult[]>;
    customValidationOnSubmit?: (currentValue: any) => Promise<ValidationResult[]>;
    children?: React.ReactNode;
    onChange?: (event?: ChangeEvent<HTMLInputElement>, value?: any, id?: string, name?: string, type?: Input) => void;
    onBlur?: (event?: FocusEvent<HTMLInputElement>, value?: any, id?: string, name?: string, type?: Input) => void;
}
